// Generated by view binder compiler. Do not edit!
package com.alineacion.ruedas.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ScrollView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.alineacion.ruedas.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.textview.MaterialTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityWheelSelectionBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final MaterialButton clearSelectionButton;

  @NonNull
  public final MaterialCardView frontLeftCard;

  @NonNull
  public final MaterialTextView frontLeftDataText;

  @NonNull
  public final MaterialButton frontLeftFixButton;

  @NonNull
  public final MaterialTextView frontLeftStabilityIndicator;

  @NonNull
  public final MaterialCardView frontRightCard;

  @NonNull
  public final MaterialTextView frontRightDataText;

  @NonNull
  public final MaterialButton frontRightFixButton;

  @NonNull
  public final MaterialTextView frontRightStabilityIndicator;

  @NonNull
  public final MaterialCardView rearLeftCard;

  @NonNull
  public final MaterialTextView rearLeftDataText;

  @NonNull
  public final MaterialButton rearLeftFixButton;

  @NonNull
  public final MaterialTextView rearLeftStabilityIndicator;

  @NonNull
  public final MaterialCardView rearRightCard;

  @NonNull
  public final MaterialTextView rearRightDataText;

  @NonNull
  public final MaterialButton rearRightFixButton;

  @NonNull
  public final MaterialTextView rearRightStabilityIndicator;

  @NonNull
  public final MaterialButton startMeasurementButton;

  private ActivityWheelSelectionBinding(@NonNull ScrollView rootView,
      @NonNull MaterialButton clearSelectionButton, @NonNull MaterialCardView frontLeftCard,
      @NonNull MaterialTextView frontLeftDataText, @NonNull MaterialButton frontLeftFixButton,
      @NonNull MaterialTextView frontLeftStabilityIndicator,
      @NonNull MaterialCardView frontRightCard, @NonNull MaterialTextView frontRightDataText,
      @NonNull MaterialButton frontRightFixButton,
      @NonNull MaterialTextView frontRightStabilityIndicator,
      @NonNull MaterialCardView rearLeftCard, @NonNull MaterialTextView rearLeftDataText,
      @NonNull MaterialButton rearLeftFixButton,
      @NonNull MaterialTextView rearLeftStabilityIndicator, @NonNull MaterialCardView rearRightCard,
      @NonNull MaterialTextView rearRightDataText, @NonNull MaterialButton rearRightFixButton,
      @NonNull MaterialTextView rearRightStabilityIndicator,
      @NonNull MaterialButton startMeasurementButton) {
    this.rootView = rootView;
    this.clearSelectionButton = clearSelectionButton;
    this.frontLeftCard = frontLeftCard;
    this.frontLeftDataText = frontLeftDataText;
    this.frontLeftFixButton = frontLeftFixButton;
    this.frontLeftStabilityIndicator = frontLeftStabilityIndicator;
    this.frontRightCard = frontRightCard;
    this.frontRightDataText = frontRightDataText;
    this.frontRightFixButton = frontRightFixButton;
    this.frontRightStabilityIndicator = frontRightStabilityIndicator;
    this.rearLeftCard = rearLeftCard;
    this.rearLeftDataText = rearLeftDataText;
    this.rearLeftFixButton = rearLeftFixButton;
    this.rearLeftStabilityIndicator = rearLeftStabilityIndicator;
    this.rearRightCard = rearRightCard;
    this.rearRightDataText = rearRightDataText;
    this.rearRightFixButton = rearRightFixButton;
    this.rearRightStabilityIndicator = rearRightStabilityIndicator;
    this.startMeasurementButton = startMeasurementButton;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityWheelSelectionBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityWheelSelectionBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_wheel_selection, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityWheelSelectionBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.clearSelectionButton;
      MaterialButton clearSelectionButton = ViewBindings.findChildViewById(rootView, id);
      if (clearSelectionButton == null) {
        break missingId;
      }

      id = R.id.frontLeftCard;
      MaterialCardView frontLeftCard = ViewBindings.findChildViewById(rootView, id);
      if (frontLeftCard == null) {
        break missingId;
      }

      id = R.id.frontLeftDataText;
      MaterialTextView frontLeftDataText = ViewBindings.findChildViewById(rootView, id);
      if (frontLeftDataText == null) {
        break missingId;
      }

      id = R.id.frontLeftFixButton;
      MaterialButton frontLeftFixButton = ViewBindings.findChildViewById(rootView, id);
      if (frontLeftFixButton == null) {
        break missingId;
      }

      id = R.id.frontLeftStabilityIndicator;
      MaterialTextView frontLeftStabilityIndicator = ViewBindings.findChildViewById(rootView, id);
      if (frontLeftStabilityIndicator == null) {
        break missingId;
      }

      id = R.id.frontRightCard;
      MaterialCardView frontRightCard = ViewBindings.findChildViewById(rootView, id);
      if (frontRightCard == null) {
        break missingId;
      }

      id = R.id.frontRightDataText;
      MaterialTextView frontRightDataText = ViewBindings.findChildViewById(rootView, id);
      if (frontRightDataText == null) {
        break missingId;
      }

      id = R.id.frontRightFixButton;
      MaterialButton frontRightFixButton = ViewBindings.findChildViewById(rootView, id);
      if (frontRightFixButton == null) {
        break missingId;
      }

      id = R.id.frontRightStabilityIndicator;
      MaterialTextView frontRightStabilityIndicator = ViewBindings.findChildViewById(rootView, id);
      if (frontRightStabilityIndicator == null) {
        break missingId;
      }

      id = R.id.rearLeftCard;
      MaterialCardView rearLeftCard = ViewBindings.findChildViewById(rootView, id);
      if (rearLeftCard == null) {
        break missingId;
      }

      id = R.id.rearLeftDataText;
      MaterialTextView rearLeftDataText = ViewBindings.findChildViewById(rootView, id);
      if (rearLeftDataText == null) {
        break missingId;
      }

      id = R.id.rearLeftFixButton;
      MaterialButton rearLeftFixButton = ViewBindings.findChildViewById(rootView, id);
      if (rearLeftFixButton == null) {
        break missingId;
      }

      id = R.id.rearLeftStabilityIndicator;
      MaterialTextView rearLeftStabilityIndicator = ViewBindings.findChildViewById(rootView, id);
      if (rearLeftStabilityIndicator == null) {
        break missingId;
      }

      id = R.id.rearRightCard;
      MaterialCardView rearRightCard = ViewBindings.findChildViewById(rootView, id);
      if (rearRightCard == null) {
        break missingId;
      }

      id = R.id.rearRightDataText;
      MaterialTextView rearRightDataText = ViewBindings.findChildViewById(rootView, id);
      if (rearRightDataText == null) {
        break missingId;
      }

      id = R.id.rearRightFixButton;
      MaterialButton rearRightFixButton = ViewBindings.findChildViewById(rootView, id);
      if (rearRightFixButton == null) {
        break missingId;
      }

      id = R.id.rearRightStabilityIndicator;
      MaterialTextView rearRightStabilityIndicator = ViewBindings.findChildViewById(rootView, id);
      if (rearRightStabilityIndicator == null) {
        break missingId;
      }

      id = R.id.startMeasurementButton;
      MaterialButton startMeasurementButton = ViewBindings.findChildViewById(rootView, id);
      if (startMeasurementButton == null) {
        break missingId;
      }

      return new ActivityWheelSelectionBinding((ScrollView) rootView, clearSelectionButton,
          frontLeftCard, frontLeftDataText, frontLeftFixButton, frontLeftStabilityIndicator,
          frontRightCard, frontRightDataText, frontRightFixButton, frontRightStabilityIndicator,
          rearLeftCard, rearLeftDataText, rearLeftFixButton, rearLeftStabilityIndicator,
          rearRightCard, rearRightDataText, rearRightFixButton, rearRightStabilityIndicator,
          startMeasurementButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
